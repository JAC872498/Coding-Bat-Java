/**/

public boolean isIn(int[] nums, int startPos, int subLen){
  int[] slice=new int[subLen+1];
  for(int n=startPos;n<startPos+subLen+1;n++){
    slice[subLen-(n-startPos)]=nums[n];
  }
  return(/*slice in nums*/);
}

public int maxMirror(int[] nums){
  int longest=0 ,length=0;
  int[] section;
  for(int startPos=0;startPos<nums.length;startPos++){
    for(int subLen=0;subLen<nums.length-startPos;subLen++){
      if(isIn(nums,startPos,subLen) && subLen>longest){
        longest=subLen;
      }
    }
  }
  return(longest);
}
