/**/

public boolean isIn(int[] nums, int startPos, int subLen){
  int[] slice=new int[subLen+1];
  for(int n=startPos;n<startPos+subLen;n++){
    slice[n-startPos]=nums[n];
  }
  slice.reverse();
}

public int maxMirror(int[] nums){
  int longest=0 ,length=0;
  int[] section;
  for(int startPos=0;startPos<nums.length-1;startPos++){
    for(int subLen=1;subLen<nums.length-startPos;subLen++){
      /*section=Arrays.copyOfRange(nums, startPos, startPos+subLen);
      if(Arrays.asList(nums).contains(section) && subLen>longest){
        longest=subLen;
      }*/
    }
  }
  return(0);
}
